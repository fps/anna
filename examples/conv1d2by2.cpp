#include <anna/conv1d.hpp>
#include <iostream>

/*
  julia> m.weight
  3×2×2 Array{Float64, 3}:
  [:, :, 1] =
   -0.95015    0.628003
   -0.107079   1.09893
    1.25046   -0.5608
  
  [:, :, 2] =
   -0.721958  -0.284452
   -0.174684   0.997204
    0.913782   0.589839
  
  julia> m.bias
  2-element Vector{Float64}:
   -0.9380392264502141
   -1.6311034455759623
  
  julia> m(x)
  16×2×1 Array{Float64, 3}:
  [:, :, 1] =
    0.586865  -4.12921
    0.501038   2.84575
    3.66229   -0.234317
    3.39498   -1.17805
   -4.55083   -3.24498
   -2.63787   -1.96255
    0.426553   0.707923
    2.57475    0.292409
   -6.68507   -4.83963
   -0.335203   0.412166
    0.175652   0.953257
   -1.95442   -2.35896
   -2.49668   -1.88076
   -1.3895    -0.860513
   -0.36121    0.396137
   -3.90027   -5.74557
  
  */

int main()
{
  anna::conv1d<float, 10, 3, 2, 2, true, 7> conv1d;

  std::vector<float> weights {
   -0.9501499539219502,
   -0.10707857977797641,
    1.2504612637816213,
    0.6280033397834937,
    1.0989269004195037,
   -0.5608003101784307,
   -0.7219579088423437,
   -0.17468403774335783,
    0.9137815946189451,
   -0.28445245530988655,
    0.997204073930411,
    0.5898394947503058,

   -0.9380392264502141,
   -1.6311034455759623,
  };

  size_t idx = 0;
  conv1d.set_parameters(weights, idx);

  std::vector<float> input {
    1.81032,   -1.19959,
   -0.0547968,  1.17915,
    1.2153,    -1.58127,
    0.866348,  -2.02488,
   -1.09742,    0.938587,
   -1.68071,   -0.0468663,
    0.521437,   1.34428,
    0.345892,  -1.46171,
   -1.30988,    1.2101,
   -0.0878636,  0.402154,
    1.40749,    1.65394,
   -0.191688,  -0.0471075,
    0.434675,   0.568868,
   -0.305031,   0.0325072,
    1.58093,    2.76099,
   -2.35385,   -2.44858,
   -1.38143,    0.684642,
    0.299477,   1.16535,
    1.66052,   -0.167453,
   -0.562925,  -1.17502,
   -1.4034,     0.102869,
    0.24404,   -0.593047,
    0.992762,  -0.0771076,
   -0.850015,  -1.22563,
    1.06331,    0.068376,
    0.232338,  -0.35114,
    0.138069,  -0.670365,
   -0.46834,   -1.21037,
    0.0327256,  1.36502,
    0.705483,  -0.844963,
  };

  std::vector<float> output(input.size());

  for (int idx = 0; idx < 3; ++idx)
  {
    conv1d.process(Eigen::Map<Eigen::Matrix<float, 2, 10>>(input.data()+20*idx), Eigen::Map<Eigen::Matrix<float, 2, 10>>(output.data()+20*idx), 10);
  }

  std::cout << Eigen::Map<Eigen::Matrix<float, 2, 30>>(output.data()).transpose() << "\n";
}
